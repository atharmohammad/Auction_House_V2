/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'

/**
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
export type ExecuteSaleInstructionArgs = {
  buyerPrice: beet.bignum
  root: number[] /* size: 32 */
  dataHash: number[] /* size: 32 */
  creatorHash: number[] /* size: 32 */
  nonce: beet.bignum
  index: number
  royaltyBasisPoints: number
  metadata: MetadataArgs
}
/**
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
export const executeSaleStruct = new beet.FixableBeetArgsStruct<
  ExecuteSaleInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['buyerPrice', beet.u64],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['dataHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creatorHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['nonce', beet.u64],
    ['index', beet.u32],
    ['royaltyBasisPoints', beet.u16],
    ['metadata', metadataArgsBeet],
  ],
  'ExecuteSaleInstructionArgs'
)
/**
 * Accounts required by the _executeSale_ instruction
 *
 * @property [] auctionHouse
 * @property [] auctionHouseAuthority
 * @property [] treasuryMint
 * @property [_writable_] treasuryAccount
 * @property [] treeConfig
 * @property [_writable_] seller
 * @property [_writable_] sellerReceiptAccount
 * @property [_writable_] merkeTree
 * @property [_writable_] sellerTradeState
 * @property [_writable_] buyer
 * @property [_writable_] buyerEscrow
 * @property [_writable_] buyerTradeState
 * @property [] assetId
 * @property [] auctionHouseFeeAccount
 * @property [] programAsSigner
 * @property [] bubblegumProgram
 * @property [] compressionProgram
 * @property [] logWrapper
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
export type ExecuteSaleInstructionAccounts = {
  auctionHouse: web3.PublicKey
  auctionHouseAuthority: web3.PublicKey
  treasuryMint: web3.PublicKey
  treasuryAccount: web3.PublicKey
  treeConfig: web3.PublicKey
  seller: web3.PublicKey
  sellerReceiptAccount: web3.PublicKey
  merkeTree: web3.PublicKey
  sellerTradeState: web3.PublicKey
  buyer: web3.PublicKey
  buyerEscrow: web3.PublicKey
  buyerTradeState: web3.PublicKey
  assetId: web3.PublicKey
  auctionHouseFeeAccount: web3.PublicKey
  programAsSigner: web3.PublicKey
  bubblegumProgram: web3.PublicKey
  compressionProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  logWrapper: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeSaleInstructionDiscriminator = [
  37, 74, 217, 157, 79, 49, 35, 6,
]

/**
 * Creates a _ExecuteSale_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
export function createExecuteSaleInstruction(
  accounts: ExecuteSaleInstructionAccounts,
  args: ExecuteSaleInstructionArgs,
  programId = new web3.PublicKey('AHV2XGm1jVAZp3NtwdVyHkbskbxk3oMfn73SXBkejUQb')
) {
  const [data] = executeSaleStruct.serialize({
    instructionDiscriminator: executeSaleInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionHouseAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treeConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.seller,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerReceiptAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkeTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerTradeState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyerEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.buyerTradeState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.assetId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.auctionHouseFeeAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.programAsSigner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bubblegumProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
