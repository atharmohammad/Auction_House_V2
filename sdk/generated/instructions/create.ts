/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionArgs = {
  sellerFeeBasisPoints: number
  requiresSignOff: boolean
}
/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export const createStruct = new beet.BeetArgsStruct<
  CreateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['sellerFeeBasisPoints', beet.u16],
    ['requiresSignOff', beet.bool],
  ],
  'CreateInstructionArgs'
)
/**
 * Accounts required by the _create_ instruction
 *
 * @property [_writable_] auctionHouse
 * @property [] authority
 * @property [] treasuryMint
 * @property [_writable_] treasuryAccount
 * @property [_writable_] treasuryWithdrawalAccount
 * @property [] treasuryWithdrawalOwner
 * @property [] feeAccount
 * @property [] feeWithdrawalAccount
 * @property [_writable_, **signer**] payer
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionAccounts = {
  auctionHouse: web3.PublicKey
  authority: web3.PublicKey
  treasuryMint: web3.PublicKey
  treasuryAccount: web3.PublicKey
  treasuryWithdrawalAccount: web3.PublicKey
  treasuryWithdrawalOwner: web3.PublicKey
  feeAccount: web3.PublicKey
  feeWithdrawalAccount: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createInstructionDiscriminator = [24, 30, 200, 40, 5, 28, 7, 119]

/**
 * Creates a _Create_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Create
 * @category generated
 */
export function createCreateInstruction(
  accounts: CreateInstructionAccounts,
  args: CreateInstructionArgs,
  programId = new web3.PublicKey('AHV2XGm1jVAZp3NtwdVyHkbskbxk3oMfn73SXBkejUQb')
) {
  const [data] = createStruct.serialize({
    instructionDiscriminator: createInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.auctionHouse,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryWithdrawalAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryWithdrawalOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.feeAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.feeWithdrawalAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
