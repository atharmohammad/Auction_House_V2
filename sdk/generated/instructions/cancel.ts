/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Cancel
 * @category generated
 */
export type CancelInstructionArgs = {
  sellerPrice: beet.bignum
  root: number[] /* size: 32 */
  dataHash: number[] /* size: 32 */
  creatorHash: number[] /* size: 32 */
  nonce: beet.bignum
  index: number
}
/**
 * @category Instructions
 * @category Cancel
 * @category generated
 */
export const cancelStruct = new beet.BeetArgsStruct<
  CancelInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['sellerPrice', beet.u64],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['dataHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['creatorHash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['nonce', beet.u64],
    ['index', beet.u32],
  ],
  'CancelInstructionArgs'
)
/**
 * Accounts required by the _cancel_ instruction
 *
 * @property [] auctionHouse
 * @property [] authority
 * @property [] treasuryMint
 * @property [] assetId
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] tradeState
 * @category Instructions
 * @category Cancel
 * @category generated
 */
export type CancelInstructionAccounts = {
  auctionHouse: web3.PublicKey
  authority: web3.PublicKey
  treasuryMint: web3.PublicKey
  assetId: web3.PublicKey
  wallet: web3.PublicKey
  tradeState: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const cancelInstructionDiscriminator = [
  232, 219, 223, 41, 219, 236, 220, 190,
]

/**
 * Creates a _Cancel_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Cancel
 * @category generated
 */
export function createCancelInstruction(
  accounts: CancelInstructionAccounts,
  args: CancelInstructionArgs,
  programId = new web3.PublicKey('AHV2XGm1jVAZp3NtwdVyHkbskbxk3oMfn73SXBkejUQb')
) {
  const [data] = cancelStruct.serialize({
    instructionDiscriminator: cancelInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.assetId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tradeState,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
