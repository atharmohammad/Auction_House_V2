/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * BumpSeedNotInHashMap: 'Bump Seed Not In HashMap'
 *
 * @category Errors
 * @category generated
 */
export class BumpSeedNotInHashMapError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'BumpSeedNotInHashMap'
  constructor() {
    super('Bump Seed Not In HashMap')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BumpSeedNotInHashMapError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new BumpSeedNotInHashMapError())
createErrorFromNameLookup.set(
  'BumpSeedNotInHashMap',
  () => new BumpSeedNotInHashMapError()
)

/**
 * AccountNotInitialized: 'Account not initialized'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotInitializedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'AccountNotInitialized'
  constructor() {
    super('Account not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new AccountNotInitializedError())
createErrorFromNameLookup.set(
  'AccountNotInitialized',
  () => new AccountNotInitializedError()
)

/**
 * InvalidSellerFeeBasisPoints: 'Invalid Seller Fee Basis Points'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSellerFeeBasisPointsError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidSellerFeeBasisPoints'
  constructor() {
    super('Invalid Seller Fee Basis Points')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSellerFeeBasisPointsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidSellerFeeBasisPointsError()
)
createErrorFromNameLookup.set(
  'InvalidSellerFeeBasisPoints',
  () => new InvalidSellerFeeBasisPointsError()
)

/**
 * NumericOverflow: 'Numeric Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericOverflowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NumericOverflow'
  constructor() {
    super('Numeric Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NumericOverflowError())
createErrorFromNameLookup.set(
  'NumericOverflow',
  () => new NumericOverflowError()
)

/**
 * NotEnoughFunds: 'Not Enough Funds'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughFundsError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'NotEnoughFunds'
  constructor() {
    super('Not Enough Funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NotEnoughFundsError())
createErrorFromNameLookup.set('NotEnoughFunds', () => new NotEnoughFundsError())

/**
 * InvalidBuyingOrSellingOrder: 'Invalid buying or selling order'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBuyingOrSellingOrderError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidBuyingOrSellingOrder'
  constructor() {
    super('Invalid buying or selling order')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBuyingOrSellingOrderError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidBuyingOrSellingOrderError()
)
createErrorFromNameLookup.set(
  'InvalidBuyingOrSellingOrder',
  () => new InvalidBuyingOrSellingOrderError()
)

/**
 * InvalidBuyingOrderPrice: 'Invalid buying order price don't match with selling order'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBuyingOrderPriceError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidBuyingOrderPrice'
  constructor() {
    super("Invalid buying order price don't match with selling order")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBuyingOrderPriceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidBuyingOrderPriceError())
createErrorFromNameLookup.set(
  'InvalidBuyingOrderPrice',
  () => new InvalidBuyingOrderPriceError()
)

/**
 * MetadataHashMismatch: 'Metadata hash does not match'
 *
 * @category Errors
 * @category generated
 */
export class MetadataHashMismatchError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MetadataHashMismatch'
  constructor() {
    super('Metadata hash does not match')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MetadataHashMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MetadataHashMismatchError())
createErrorFromNameLookup.set(
  'MetadataHashMismatch',
  () => new MetadataHashMismatchError()
)

/**
 * InvalidBuyerTradeState: 'Buyer trade state is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBuyerTradeStateError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidBuyerTradeState'
  constructor() {
    super('Buyer trade state is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBuyerTradeStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidBuyerTradeStateError())
createErrorFromNameLookup.set(
  'InvalidBuyerTradeState',
  () => new InvalidBuyerTradeStateError()
)

/**
 * BothPartiesNeedToAgreeToSale: 'Both parties need to agree on a price'
 *
 * @category Errors
 * @category generated
 */
export class BothPartiesNeedToAgreeToSaleError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'BothPartiesNeedToAgreeToSale'
  constructor() {
    super('Both parties need to agree on a price')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BothPartiesNeedToAgreeToSaleError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new BothPartiesNeedToAgreeToSaleError()
)
createErrorFromNameLookup.set(
  'BothPartiesNeedToAgreeToSale',
  () => new BothPartiesNeedToAgreeToSaleError()
)

/**
 * InvalidSellerTradeState: 'Seller trade is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSellerTradeStateError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidSellerTradeState'
  constructor() {
    super('Seller trade is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSellerTradeStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidSellerTradeStateError())
createErrorFromNameLookup.set(
  'InvalidSellerTradeState',
  () => new InvalidSellerTradeStateError()
)

/**
 * PublicKeyMismatch: 'Provided keys don't match'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyMismatchError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'PublicKeyMismatch'
  constructor() {
    super("Provided keys don't match")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicKeyMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new PublicKeyMismatchError())
createErrorFromNameLookup.set(
  'PublicKeyMismatch',
  () => new PublicKeyMismatchError()
)

/**
 * PayerNotProvided: 'Payer not provided'
 *
 * @category Errors
 * @category generated
 */
export class PayerNotProvidedError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'PayerNotProvided'
  constructor() {
    super('Payer not provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PayerNotProvidedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new PayerNotProvidedError())
createErrorFromNameLookup.set(
  'PayerNotProvided',
  () => new PayerNotProvidedError()
)

/**
 * RequireAuctionHouseSignOff: 'Require auction house to sign off'
 *
 * @category Errors
 * @category generated
 */
export class RequireAuctionHouseSignOffError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'RequireAuctionHouseSignOff'
  constructor() {
    super('Require auction house to sign off')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireAuctionHouseSignOffError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177d,
  () => new RequireAuctionHouseSignOffError()
)
createErrorFromNameLookup.set(
  'RequireAuctionHouseSignOff',
  () => new RequireAuctionHouseSignOffError()
)

/**
 * SellerTokenAccountCannotHaveDelegate: 'Seller token account cannot have delegate'
 *
 * @category Errors
 * @category generated
 */
export class SellerTokenAccountCannotHaveDelegateError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'SellerTokenAccountCannotHaveDelegate'
  constructor() {
    super('Seller token account cannot have delegate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellerTokenAccountCannotHaveDelegateError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new SellerTokenAccountCannotHaveDelegateError()
)
createErrorFromNameLookup.set(
  'SellerTokenAccountCannotHaveDelegate',
  () => new SellerTokenAccountCannotHaveDelegateError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
