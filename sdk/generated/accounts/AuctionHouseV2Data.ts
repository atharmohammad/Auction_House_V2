/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * Arguments used to create {@link AuctionHouseV2Data}
 * @category Accounts
 * @category generated
 */
export type AuctionHouseV2DataArgs = {
  authority: web3.PublicKey
  treasuryMint: web3.PublicKey
  sellerFeeBasisPoints: number
  requiresSignOff: boolean
  treasuryAccount: web3.PublicKey
  treasuryWithdrawalAccount: web3.PublicKey
  feeAccount: web3.PublicKey
  feeWithdrawalAccount: web3.PublicKey
  bump: number
  treasuryBump: number
  feeAccountBump: number
}

export const auctionHouseV2DataDiscriminator = [
  117, 84, 179, 177, 135, 150, 240, 215,
]
/**
 * Holds the data for the {@link AuctionHouseV2Data} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class AuctionHouseV2Data implements AuctionHouseV2DataArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly treasuryMint: web3.PublicKey,
    readonly sellerFeeBasisPoints: number,
    readonly requiresSignOff: boolean,
    readonly treasuryAccount: web3.PublicKey,
    readonly treasuryWithdrawalAccount: web3.PublicKey,
    readonly feeAccount: web3.PublicKey,
    readonly feeWithdrawalAccount: web3.PublicKey,
    readonly bump: number,
    readonly treasuryBump: number,
    readonly feeAccountBump: number
  ) {}

  /**
   * Creates a {@link AuctionHouseV2Data} instance from the provided args.
   */
  static fromArgs(args: AuctionHouseV2DataArgs) {
    return new AuctionHouseV2Data(
      args.authority,
      args.treasuryMint,
      args.sellerFeeBasisPoints,
      args.requiresSignOff,
      args.treasuryAccount,
      args.treasuryWithdrawalAccount,
      args.feeAccount,
      args.feeWithdrawalAccount,
      args.bump,
      args.treasuryBump,
      args.feeAccountBump
    )
  }

  /**
   * Deserializes the {@link AuctionHouseV2Data} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [AuctionHouseV2Data, number] {
    return AuctionHouseV2Data.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link AuctionHouseV2Data} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<AuctionHouseV2Data> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find AuctionHouseV2Data account at ${address}`)
    }
    return AuctionHouseV2Data.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'AHV2XGm1jVAZp3NtwdVyHkbskbxk3oMfn73SXBkejUQb'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, auctionHouseV2DataBeet)
  }

  /**
   * Deserializes the {@link AuctionHouseV2Data} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [AuctionHouseV2Data, number] {
    return auctionHouseV2DataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link AuctionHouseV2Data} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return auctionHouseV2DataBeet.serialize({
      accountDiscriminator: auctionHouseV2DataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link AuctionHouseV2Data}
   */
  static get byteSize() {
    return auctionHouseV2DataBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link AuctionHouseV2Data} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      AuctionHouseV2Data.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link AuctionHouseV2Data} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === AuctionHouseV2Data.byteSize
  }

  /**
   * Returns a readable version of {@link AuctionHouseV2Data} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      treasuryMint: this.treasuryMint.toBase58(),
      sellerFeeBasisPoints: this.sellerFeeBasisPoints,
      requiresSignOff: this.requiresSignOff,
      treasuryAccount: this.treasuryAccount.toBase58(),
      treasuryWithdrawalAccount: this.treasuryWithdrawalAccount.toBase58(),
      feeAccount: this.feeAccount.toBase58(),
      feeWithdrawalAccount: this.feeWithdrawalAccount.toBase58(),
      bump: this.bump,
      treasuryBump: this.treasuryBump,
      feeAccountBump: this.feeAccountBump,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const auctionHouseV2DataBeet = new beet.BeetStruct<
  AuctionHouseV2Data,
  AuctionHouseV2DataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['treasuryMint', beetSolana.publicKey],
    ['sellerFeeBasisPoints', beet.u16],
    ['requiresSignOff', beet.bool],
    ['treasuryAccount', beetSolana.publicKey],
    ['treasuryWithdrawalAccount', beetSolana.publicKey],
    ['feeAccount', beetSolana.publicKey],
    ['feeWithdrawalAccount', beetSolana.publicKey],
    ['bump', beet.u8],
    ['treasuryBump', beet.u8],
    ['feeAccountBump', beet.u8],
  ],
  AuctionHouseV2Data.fromArgs,
  'AuctionHouseV2Data'
)
